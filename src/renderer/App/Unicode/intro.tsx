const intro = 
`
<pre>
## Unicode 说明
\`\`\`
Unicode 是国际标准字符集，它将世界各种语言的每个字符定义一个唯一的编码，以满足跨语言、跨平台的文本信息转换

Unicode 字符集的编码范围是 \`0x0000 - 0x10FFFF\`
可以容纳一百多万个字符， 每个字符都有一个独一无二的编码,
也即每个字符都有一个二进制数值和它对应，这里的二进制数值也叫\`码点\`
比如：汉字 "中" 的 码点是 \`0x4E2D\`, 大写字母 A 的码点是 \`0x41\`,具体字符对应的 Unicode 编码可以查询 Unicode字符编码表

Unicode 只是字符集，UTF-8、UTF-16、UTF-32 才是真正的字符编码规则
\`\`\`

## UTF-8 编码
\`\`\`
一种变长字符编码，被定义为将码点编码为 1 至 4 个字节，具体取决于码点数值中有效二进制位的数量

UTF-8 的编码规则:

    1 对于单字节的符号，字节的第一位设为 0，后面 7 位为这个符号的 Unicode 码。
      因此对于英语字母，UTF-8 编码和 ASCII 码是相同的, 所以 UTF-8 能兼容 ASCII 编码，这也是互联网普遍采用 UTF-8 的原因之一
    2 对于 n 字节的符号（ n > 1），第一个字节的前 n 位都设为 1，第 n + 1 位设为 0，后面字节的前两位一律设为 10 。
      剩下的没有提及的二进制位，全部为这个符号的 Unicode 码
    

    \`\`\`

## UTF-16 编码
\`\`\`
一种变长字符编码, 这种编码方式比较特殊, 它将字符编码成 2 字节 或者 4 字节

具体的编码规则如下:

    1 对于 Unicode 码小于 0x10000 的字符， 使用 2 个字节存储，并且是直接存储 Unicode 码，不用进行编码转换
    2 对于 Unicode 码在 0x10000 和 0x10FFFF 之间的字符，使用 4 个字节存储，
      这 4 个字节分成前后两部分，每个部分各两个字节，其中，
      前面两个字节的前 6 位二进制固定为 110110，后面两个字节的前 6 位二进制固定为 110111, 
      前后部分各剩余 10 位二进制表示符号的 Unicode 码 减去 0x10000 的结果
    3 大于 0x10FFFF 的 Unicode 码无法用 UTF-16 编码
    \`\`\`

## UTF-32 编码
\`\`\`
UTF-32 是固定长度的编码，始终占用 4 个字节，足以容纳所有的 Unicode 字符，
直接存储 Unicode 码即可，不需要任何编码转换。虽然浪费了空间，但提高了效率
\`\`\`

## BOM
\`\`\`
BOM 是 byte-order mark 的缩写，是 "字节序标记" 的意思, 它常被用来当做标识文件是以 UTF-8、UTF-16 或 UTF-32 编码的标记
在 Unicode 编码中有一个叫做 "零宽度非换行空格" 的字符 ( ZERO WIDTH NO-BREAK SPACE ), 用字符 FEFF 来表示

对于 UTF-16 ，如果接收到以 \`FEFF\` 开头的字节流， 就表明是大端字节序，如果接收到 \`FFFE\`， 就表明字节流 是小端字节序

UTF-8 没有字节序问题，UTF-8 编码的 BOM 是 \`EF BB BF\`, 所以如果接收到以 \`EF BB BF\` 开头的字节流，就知道这是UTF-8 文件
\`\`\`
</pre>
`;
const UnicodeIntro = () => {

  return (
    <div 
      dangerouslySetInnerHTML={{ __html: intro }}
      style={ { "overflowY": "scroll","height": "300px" }}>
    </div>
  );
}

export default UnicodeIntro;